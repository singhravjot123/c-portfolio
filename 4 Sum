Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

    0 <= a, b, c, d < n
    a, b, c, and d are distinct.
    nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n=nums.length;
        Arrays.sort(nums);
    List<List<Integer>> st=new ArrayList<>();
    for(int i=0;i<n;i++){
        if(i>0&&nums[i]==nums[i-1]) continue;
        for(int m=i+1;m<n;m++){
        if(m!=i+1&&nums[m]==nums[m-1]) continue;
       int  j=m+1;
        int  k=n-1;
        while(j<k){
        long sum=nums[i];
        sum+=nums[m];
        sum+=nums[j];
        sum+=nums[k];
            if(sum==target){
             List<Integer> ans=new ArrayList<>();
              ans.add(nums[i]);
               ans.add(nums[m]);
               ans.add(nums[j]);
               ans.add(nums[k]);
                st.add(ans);
                j++;
                k--;
                while(j<k&&nums[j]==nums[j-1]) j++;
                while(j<k&&nums[k]==nums[k+1]) k--;
                }
            else if(sum<target)
            j++;
            else            
                 k--;
        }
    }
    }
    return st;
    }}



