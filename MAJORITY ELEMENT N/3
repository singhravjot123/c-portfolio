Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]

Example 2:

Input: nums = [1]
Output: [1]

Example 3:

Input: nums = [1,2]
Output: [1,2]

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        ArrayList<Integer>arr=new ArrayList<>();         //Mentor solution
        int cnt1=0,cnt2=0;
        int el1=Integer.MIN_VALUE,el2=Integer.MIN_VALUE;
        int n=nums.length;
        for(int i=0;i<nums.length;i++){
            if(cnt1==0&&nums[i]!=el2){
            cnt1++;
            el1=nums[i];
            }
            else if(cnt2==0&&nums[i]!=el1){
            cnt2++;
            el2=nums[i];
            }
            else if(nums[i]==el1) cnt1++;
            else if(nums[i]==el2) cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        cnt1=0;cnt2=0;
        int n1=(int)(n/3)+1;
        for(int i=0;i<n;i++){
            if(el1==nums[i])
            cnt1++;
            if(el2==nums[i])
            cnt2++;
        }
        if(cnt1>=n1) arr.add(el1);
        if(cnt2>=n1) arr.add(el2);
        return arr;
    }
}


class Solution {
    public List<Integer> majorityElement(int[] nums) {
        HashMap<Integer,Integer>mp=new HashMap<>();
        ArrayList<Integer>arr=new ArrayList<>();
        int size=nums.length;
        int n1=(int)(size/3)+1;
        for(int i=0;i<nums.length;i++){
            if(mp.containsKey(nums[i])){
            mp.put(nums[i],mp.get(nums[i])+1);              // MY SOLUTION//
        }
        else{
            mp.put(nums[i],1);
        }
        if(mp.get(nums[i])==n1)
        arr.add(nums[i]);
        }
    return arr;
}
}
